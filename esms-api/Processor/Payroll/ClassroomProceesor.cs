using API.Layers.ContextLayer;
using API.Manager;
using API.Migrations;
using API.Models;
using API.Shared;
using API.Views.Shared;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;

namespace API.Processor.Admin
{
    public class ClassroomProcessor : IProcessor<ClassroomBaseModel>
    {
        private AppDBContext _context;
        private IManager? _manager;
        public ClassroomProcessor(AppDBContext context)
        {
            _context = context;
            _manager = Builder.MakeManagerClass(Enums.ModuleClassName.Classroom, _context);
        }

        public async Task<ApiResponse> ProcessGet(Guid MenuId, ClaimsPrincipal _User)
        {
            ApiResponse apiResponse = new ApiResponse();
            if (_manager != null)
            {
                var response = await _manager.GetDataAsync(_User);
                var _Table = response.data as IEnumerable<Classroom>;
                var apiResponseUser = await SecurityHelper.UserMenuPermissionAsync(MenuId, _User);
                if (apiResponseUser.statusCode.ToString() != StatusCodes.Status200OK.ToString()) { return apiResponseUser; }
                var _UserMenuPermissionAsync = (GetUserPermissionViewModel)apiResponseUser.data;
                if (Convert.ToInt32(response.statusCode) == 200)
                {

                    var result = (from ViewTable in _Table
                                  orderby ViewTable.Code ascending
                                  select new ClassroomViewModel
                                  {
                                      Id = ViewTable.Id,
                                      Code = ViewTable.Code,
                                      RoomNumber = ViewTable.RoomNumber,
                                      RoomType=ViewTable.RoomType,
                                      Capacity=ViewTable.Capacity,
                                      Location=ViewTable.Location,
                                      Active = ViewTable.Active
                                     
                                  }).ToList();
                    response.data = result;
                }
                response.Permissions = _UserMenuPermissionAsync;
                return response;
            }
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = "Invalid Class";
            return apiResponse;
        }
        public async Task<ApiResponse> ProcessGetById(Guid _Id, Guid _MenuId, ClaimsPrincipal _User)
        {
            ApiResponse apiResponse = new ApiResponse();
            if (_manager != null)
            {
                var response = await _manager.GetDataByIdAsync(_Id, _User);
                if (Convert.ToInt32(response.statusCode) == 200)
                {
                    var _Table = response.data as Classroom;
                    var _ViewModel = new ClassroomViewByIdModel
                    {
                        Id = _Table.Id,
                        Code = _Table.Code,
                        RoomNumber = _Table.RoomNumber,
                        RoomType=_Table.RoomType,
                        Capacity=_Table.Capacity,
                        Location=_Table.Location,
                        Active = _Table.Active,
                    };
                    response.data = _ViewModel;
                }
                return response;
            }
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = "Invalid Class";
            return apiResponse;
        }

        public async Task<ApiResponse> ProcessPost(object _Classroom, ClaimsPrincipal _User)
        {
            ApiResponse apiResponse = new ApiResponse();
            var Classroom = (ClassroomAddModel)_Classroom;
            if (_manager != null)
            {
                // Get the highest existing code from the database
                var lastClassroom = await _context.Classrooms
                    .OrderByDescending(c => c.Code)
                    .FirstOrDefaultAsync();

                int nextNumber = 1;
                if (lastClassroom != null && lastClassroom.Code.StartsWith("CLS-"))
                {
                    // Extract the numeric part and increment
                    string numericPart = lastClassroom.Code.Substring(4);
                    if (int.TryParse(numericPart, out int lastNumber))
                    {
                        nextNumber = lastNumber + 1;
                    }
                }

                // Format with leading zeros
                string autoGeneratedCode = $"CLS-{nextNumber:D3}";

                var _Table = new Classroom
                {
                    Code = autoGeneratedCode,
                    RoomNumber = Classroom.RoomNumber,
                    RoomType=Classroom.RoomType,
                    Capacity=Classroom.Capacity,
                    Location=Classroom.Location,
                    Active = Classroom.Active,
                    
                };
                return await _manager.AddAsync(_Table, _User);
            }
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = "Invalid Class";
            return apiResponse;
        }

        public async Task<ApiResponse> ProcessPut(object _Classroom, ClaimsPrincipal _User)
        {
            ApiResponse apiResponse = new ApiResponse();
            var Classroom = (ClassroomUpdateModel)_Classroom;
            if (_manager != null)
            {
                var _Table = new Classroom
                {
                    Id = Classroom.Id,
                    Code = Classroom.Code,
                    RoomNumber = Classroom.RoomNumber,
                    RoomType = Classroom.RoomType,
                    Capacity = Classroom.Capacity,
                    Location = Classroom.Location,
                    Active = Classroom.Active,
                    
                };
                return await _manager.UpdateAsync(_Table, _User);

            }
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = "Invalid Class";
            return apiResponse;
        }
        public async Task<ApiResponse> ProcessDelete(Guid _Id, ClaimsPrincipal _User)
        {
            ApiResponse apiResponse = new ApiResponse();
            if (_manager != null)
            {
                return await _manager.DeleteAsync(_Id, _User);
            }
            apiResponse.statusCode = StatusCodes.Status405MethodNotAllowed.ToString();
            apiResponse.message = "Invalid Class";
            return apiResponse;
        }
    }
}